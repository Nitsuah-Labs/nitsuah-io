name: CI

on:
  push:
    branches: [ main, master, phase-2 ]
  pull_request:
    branches: [ main, master, phase-2 ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
      - name: Cache node_modules
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Install dependencies
        run: npm ci
      - name: Cache .next
        uses: actions/cache@v4
        with:
          path: .next/cache
          key: ${{ runner.os }}-next-${{ hashFiles('**/package-lock.json') }}
      - name: Run codegen
        run: node scripts/wagmi-generate.js || true
      - name: Build
        run: npm run build
      - name: Typecheck
        run: npm run typecheck || true
      - name: Run tests
        run: npm test
name: CI

on:
  push:
    branches: [ main, phase-2 ]
  pull_request:
    branches: [ main, phase-2 ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Validate (typecheck + format check)
        run: npm run validate

      - name: Build
        run: npm run build

      - name: Upload Next build output (artifact)
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: next-build
          path: .next
name: CI

on:
  push:
    branches: [ main, master, dev ]
  pull_request:
    branches: [ main, master, dev ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Generate wagmi hooks
        run: npm run wagmi
        
      - name: Run ESLint
        run: npm run lint
        continue-on-error: true
        
      - name: TypeScript check
        run: npx tsc --noEmit
        continue-on-error: true
        
      - name: Build application
        run: npm run build
        
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        if: matrix.node-version == '20.x'
        with:
          name: build-files
          path: .next/
          retention-days: 1

  link-check:
    runs-on: ubuntu-latest
    if: contains(github.event.pull_request.body, '[link-check]') || github.event_name == 'push'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Link Checker
        uses: lycheeverse/lychee-action@v1.9.3
        with:
          args: --verbose --no-progress './**/*.md' './**/*.tsx' './**/*.ts' --exclude-mail
          fail: false
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}

  accessibility-check:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: matrix.node-version == '20.x'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Use Node.js 20.x
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files
          path: .next/
          
      - name: Start application
        run: npm start &
        
      - name: Wait for application to start
        run: sleep 10
        
      - name: Run Lighthouse CI
        run: |
          npm install -g @lhci/cli@0.12.x
          lhci autorun
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}
        continue-on-error: true

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Run npm audit
        run: npm audit --audit-level high
        continue-on-error: true
        
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
        continue-on-error: true
        
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
        continue-on-error: true